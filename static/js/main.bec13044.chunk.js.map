{"version":3,"sources":["index.js"],"names":["calculateWinner","squares","boardSize","lines","i","line","j","id","push","inclineLeft","inclineRight","console","log","length","hasWon","currentLine","lineOwner","currentSquare","player","Square","props","style","status","backgroundColor","color","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onClick","value","Board","_this","this","winner","includes","clicked","key","board","boardRows","renderSquare","React","Component","Game","_this2","Object","_home_paolo_Documents_html_tictactoe_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_paolo_Documents_html_tictactoe_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_paolo_Documents_html_tictactoe_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","history","Array","fill","location","col","row","stepNumber","xIsNext","reversed","newBoardSize","boardSizeValid","slice","setState","concat","Math","floor","step","e","preventDefault","resetGame","target","validity","size","match","order","_this3","current","moves","map","move","coords","desc","jumpTo","handleClick","type","placeholder","onChange","setBoardSize","changeBoardSize","disabled","reverseOrder","ReactDOM","render","document","getElementById"],"mappings":"mOAIA,SAASA,EAAgBC,EAASC,GAGjC,IAFA,IAAIC,EAAQ,GAEHC,EAAI,EAAGA,EAAIF,EAAWE,IAAK,CAGnC,IAFA,IAAIC,EAAO,GAEFC,EAAI,EAAGA,EAAIJ,EAAWI,IAAK,CACnC,IAAIC,EAAML,EAAYE,EAAKE,EAC3BD,EAAKG,KAAKD,GAGXJ,EAAMK,KAAKH,GAGZ,IAAK,IAAID,EAAI,EAAGA,EAAIF,EAAWE,IAAK,CAGnC,IAFA,IAAIC,EAAO,GAEFC,EAAI,EAAGA,EAAIJ,EAAWI,IAAK,CACnC,IAAIC,EAAML,EAAYI,EAAKF,EAC3BC,EAAKG,KAAKD,GAGXJ,EAAMK,KAAKH,GAKZ,IAFA,IAAII,EAAc,GAETL,EAAI,EAAGA,EAAIF,EAAWE,IAAK,CACnC,IAAIG,IAAOL,EAAY,GAAKE,EAC5BK,EAAYD,KAAKD,GAGlBJ,EAAMK,KAAKC,GAIX,IAFA,IAAIC,EAAe,GAEVN,EAAI,EAAGA,EAAIF,EAAWE,IAAK,CACnC,IAAIG,GAAML,EAAY,IAAME,EAAI,GAChCM,EAAaF,KAAKD,GAGnBJ,EAAMK,KAAKE,GAEXC,QAAQC,IAAIT,GAEZQ,QAAQC,IAAIX,GAEZ,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAMU,OAAQT,IAAK,CAKtC,IAJA,IAAIU,GAAS,EACTC,EAAcZ,EAAMC,GACpBY,EAAYf,EAAQc,EAAY,IAE3BT,EAAI,EAAGA,EAAIH,EAAMC,GAAGS,OAAQP,IAAK,CACzC,IAAIW,EAAgBhB,EAAQc,EAAYT,IAEnCQ,GAAWE,GAAaC,IAAkBD,IAC9CF,GAAS,GAIX,GAAIA,EACH,MAAO,CACNI,OAAQF,EACRX,KAAMU,GAKT,OAAO,KAGR,SAASI,EAAOC,GACf,IAAIC,EAaJ,MAXqB,WAAjBD,EAAME,OACTD,EAAQ,CACPE,gBAAiB,UACjBC,MAAO,SAEmB,YAAjBJ,EAAME,SAChBD,EAAQ,CACPG,MAAO,YAKRC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,QAAST,EAAMS,QAASR,MAAOA,GACxDD,EAAMU,WAKJC,uLACQ3B,GAAG,IACXkB,EADWU,EAAAC,KASf,OANIA,KAAKb,MAAMc,QAAUD,KAAKb,MAAMc,OAAO7B,KAAK8B,SAAS/B,GACxDkB,EAAS,SACCW,KAAKb,MAAMgB,UAAYhC,IACjCkB,EAAS,WAITG,EAAAC,EAAAC,cAACR,EAAD,CACCW,MAAOG,KAAKb,MAAMnB,QAAQG,GAC1ByB,QAAS,kBAAMG,EAAKZ,MAAMS,QAAQzB,IAClCkB,OAAQA,EACRe,IAAKjC,qCASP,IAHA,IAAMF,EAAY+B,KAAKb,MAAMlB,UACzBoC,EAAQ,GAEHlC,EAAI,EAAGA,EAAIF,EAAWE,IAAK,CAGnC,IAFA,IAAImC,EAAW,GAENjC,EAAI,EAAGA,EAAIJ,EAAWI,IAC9BiC,EAAU/B,KAAKyB,KAAKO,aAAatC,EAAYE,EAAIE,IAGlDgC,EAAM9B,KAAKiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYS,IAAKjC,GAAImC,IAGhD,OACCd,EAAAC,EAAAC,cAAA,WACEW,UApCeG,IAAMC,WA0CpBC,cACL,SAAAA,EAAYvB,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAZ,KAAAU,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhB,KAAMb,KACD8B,MAAQ,CACZC,QAAS,CAAC,CACTlD,QAASmD,MAAM,GAAGC,KAAK,QAExBC,SAAU,CAAC,CACVC,IAAK,KACLC,IAAK,OAENC,WAAY,EACZC,SAAS,EACTtB,QAAS,KACTuB,UAAU,EACVzD,UAAW,EACX0D,aAAc,EACdC,gBAAgB,GAhBCjB,2EAoBPxC,GACX,IAAM+C,EAAUlB,KAAKiB,MAAMC,QAAQW,MAAM,EAAG7B,KAAKiB,MAAMO,WAAa,GAC9DH,EAAWrB,KAAKiB,MAAMI,SAASQ,MAAM,EAAG7B,KAAKiB,MAAMO,WAAa,GAEhExD,EADUkD,EAAQA,EAAQtC,OAAS,GACjBZ,QAAQ6D,QAG5B9D,EAAgBC,EAFFgC,KAAKiB,MAAMhD,YAEcD,EAAQG,KAInDH,EAAQG,GAAK6B,KAAKiB,MAAMQ,QAAU,IAAM,IAExCzB,KAAK8B,SAAS,CACbZ,QAASA,EAAQa,OAAO,CAAC,CACxB/D,QAASA,KAEVqD,SAAUA,EAASU,OAAO,CAAC,CAC1BT,IAAMnD,EAAI,EACVoD,IAAMS,KAAKC,MAAM9D,EAAI,MAEtBqD,WAAYN,EAAQtC,OACpB6C,SAAUzB,KAAKiB,MAAMQ,0CAIhBS,GACN,IAAMb,EAAWrB,KAAKiB,MAAMI,SAASa,GAErClC,KAAK8B,SAAS,CACbN,WAAYU,EACZT,QAAUS,EAAO,IAAO,EACxB/B,QAASkB,EAASC,IAAO,EAAID,EAASE,6CAKvCvB,KAAK8B,SAAS,CACbJ,UAAW1B,KAAKiB,MAAMS,+CAKvB1B,KAAK8B,SAAS,CACbZ,QAAS,CAAC,CACTlD,QAASmD,MAAM,GAAGC,KAAK,QAExBC,SAAU,CAAC,CACVC,IAAK,KACLC,IAAK,OAENC,WAAY,EACZC,SAAS,EACTtB,QAAS,KACTuB,UAAU,4CAIIS,GACfA,EAAEC,iBACF,IAAIT,EAAe3B,KAAKiB,MAAMU,aAE9B3B,KAAKqC,YAELrC,KAAK8B,SAAS,CACb7D,UAAW0D,yCAIAQ,GACZ,IAAItC,EAAQsC,EAAEG,OAAOzC,MACjB0C,GAAW,EACXC,EAAOxC,KAAKiB,MAAMhD,UAGlB4B,EAAM4C,MAFI,WAGbF,GAAW,EACXC,EAAO3C,GAGRG,KAAK8B,SAAS,CACbF,eAAgBW,EAChBZ,aAAca,qCAIP,IA0BJnD,EAUAqD,EApCIC,EAAA3C,KACFkB,EAAUlB,KAAKiB,MAAMC,QACrBG,EAAWrB,KAAKiB,MAAMI,SACtBK,EAAW1B,KAAKiB,MAAMS,SACtBvB,EAAUH,KAAKiB,MAAMd,QACrByC,EAAU1B,EAAQlB,KAAKiB,MAAMO,YAC7BvD,EAAY+B,KAAKiB,MAAMhD,UACvBgC,EAASlC,EAAgB6E,EAAQ5E,QAASC,GAE1C4E,EAAQ3B,EAAQ4B,IAAI,SAACZ,EAAMa,GAC5BrB,IACHqB,EAAO7B,EAAQtC,OAAS,EAAImE,GAG7B,IAAMC,EAAS,IAAM3B,EAAS0B,GAAMzB,IAAM,IAAMD,EAAS0B,GAAMxB,IAAM,IAC/D0B,EAAOF,EAAO,eAAiBA,EAAO,IAAMC,EAAS,mBAE3D,OACCxD,EAAAC,EAAAC,cAAA,MAAIU,IAAK2C,GACRvD,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAM+C,EAAKO,OAAOH,KACjCE,MAwBL,OAfC5D,GADIY,GAAUD,KAAKiB,MAAMO,YAAevD,EAAYA,EAC3C,OACCgC,EACD,WAAaA,EAAOhB,OAEpB,iBAAmBe,KAAKiB,MAAMQ,QAAU,IAAM,KAMvDiB,EADGhB,EACK,iBAEA,kBAIRlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdH,EAAAC,EAAAC,cAACI,EAAD,CACC9B,QAAS4E,EAAQ5E,QACjB4B,QAAS,SAACzB,GAAD,OAAOwE,EAAKQ,YAAYhF,IACjC8B,OAAQA,EACRE,QAASA,EACTlC,UAAWA,KAGbuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbN,GAEFG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,SAAO0D,KAAK,MAAMC,YAAarD,KAAKiB,MAAMhD,UAAWqF,SAAU,SAACnB,GAAD,OAAOQ,EAAKY,aAAapB,MACxF3C,EAAAC,EAAAC,cAAA,UAAQE,QAAS,SAACuC,GAAD,OAAOQ,EAAKa,gBAAgBrB,IAAIsB,UAAWzD,KAAKiB,MAAMW,gBAAvE,qBAGApC,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAM+C,EAAKe,iBAC1BhB,GAEFlD,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAM+C,EAAKN,cAA5B,eAID7C,EAAAC,EAAAC,cAAA,UACEmD,YAnLYrC,IAAMC,WA2LzBkD,IAASC,OACRpE,EAAAC,EAAAC,cAACgB,EAAD,MACAmD,SAASC,eAAe","file":"static/js/main.bec13044.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction calculateWinner(squares, boardSize) {\n\tlet lines = [];\n\n\tfor (let i = 0; i < boardSize; i++) {\n\t\tlet line = [];\n\n\t\tfor (let j = 0; j < boardSize; j++) {\n\t\t\tlet id = (boardSize * i) + j;\n\t\t\tline.push(id);\n\t\t}\n\n\t\tlines.push(line);\n\t}\n\n\tfor (let i = 0; i < boardSize; i++) {\n\t\tlet line = [];\n\n\t\tfor (let j = 0; j < boardSize; j++) {\n\t\t\tlet id = (boardSize * j) + i;\n\t\t\tline.push(id);\n\t\t}\n\n\t\tlines.push(line);\n\t}\n\n\tlet inclineLeft = [];\n\n\tfor (let i = 0; i < boardSize; i++) {\n\t\tlet id = (+boardSize + 1) * i;\n\t\tinclineLeft.push(id);\n\t}\n\n\tlines.push(inclineLeft);\n\n\tlet inclineRight = [];\n\n\tfor (let i = 0; i < boardSize; i++) {\n\t\tlet id = (boardSize - 1) * (i + 1);\n\t\tinclineRight.push(id);\n\t}\n\n\tlines.push(inclineRight);\n\n\tconsole.log(lines);\n\n\tconsole.log(squares);\n\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tlet hasWon = true;\n\t\tlet currentLine = lines[i];\n\t\tlet lineOwner = squares[currentLine[0]];\n\n\t\tfor (let j = 1; j < lines[i].length; j++) {\n\t\t\tlet currentSquare = squares[currentLine[j]];\n\n\t\t\tif (!hasWon || !lineOwner || currentSquare !== lineOwner) {\n\t\t\t\thasWon = false;\n\t\t\t}\n\t\t}\n\n\t\tif (hasWon) {\n\t\t\treturn {\n\t\t\t\tplayer: lineOwner,\n\t\t\t\tline: currentLine,\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n}\n\nfunction Square(props) {\n\tlet style;\n\n\tif (props.status === 'winner') {\n\t\tstyle = {\n\t\t\tbackgroundColor: 'crimson',\n\t\t\tcolor: 'white',\n\t\t};\n\t} else if (props.status === 'clicked') {\n\t\tstyle = {\n\t\t\tcolor: 'crimson',\n\t\t};\n\t}\n\t\n\treturn (\n\t\t<button className=\"square\" onClick={props.onClick} style={style}>\n\t\t\t{props.value}\n\t\t</button>\n\t);\n}\n\nclass Board extends React.Component {\n\trenderSquare(i) {\n\t\tlet status;\n\n\t\tif (this.props.winner && this.props.winner.line.includes(i)) {\n\t\t\tstatus = 'winner';\n\t\t} else if (this.props.clicked === i) {\n\t\t\tstatus = 'clicked';\n\t\t}\n\n\t\treturn (\n\t\t\t<Square \n\t\t\t\tvalue={this.props.squares[i]} \n\t\t\t\tonClick={() => this.props.onClick(i)}\n\t\t\t\tstatus={status}\n\t\t\t\tkey={i}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst boardSize = this.props.boardSize;\n\t\tlet board = [];\n\n\t\tfor (let i = 0; i < boardSize; i++) {\n\t\t\tlet boardRows =[];\n\n\t\t\tfor (let j = 0; j < boardSize; j++) {\n\t\t\t\tboardRows.push(this.renderSquare(boardSize * i + j));\n\t\t\t}\n\n\t\t\tboard.push(<div className=\"board-row\" key={i}>{boardRows}</div>);\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{board}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thistory: [{\n\t\t\t\tsquares: Array(9).fill(null),\n\t\t\t}],\n\t\t\tlocation: [{\n\t\t\t\tcol: null,\n\t\t\t\trow: null,\n\t\t\t}],\n\t\t\tstepNumber: 0,\n\t\t\txIsNext: true,\n\t\t\tclicked: null,\n\t\t\treversed: false,\n\t\t\tboardSize: 3,\n\t\t\tnewBoardSize: 3,\n\t\t\tboardSizeValid: false,\n\t\t};\n\t}\n\n\thandleClick(i) {\n\t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1);\n\t\tconst location = this.state.location.slice(0, this.state.stepNumber + 1);\n\t\tconst current = history[history.length - 1];\n\t\tconst squares = current.squares.slice();\n\t\tconst boardSize = this.state.boardSize;\n\n\t\tif (calculateWinner(squares, boardSize) || squares[i]) {\n\t\t\treturn;\n\t\t}\n\n\t\tsquares[i] = this.state.xIsNext ? 'X' : 'O';\n\t\t\n\t\tthis.setState({\n\t\t\thistory: history.concat([{\n\t\t\t\tsquares: squares,\n\t\t\t}]),\n\t\t\tlocation: location.concat([{\n\t\t\t\tcol: (i % 3),\n\t\t\t\trow: (Math.floor(i / 3)),\n\t\t\t}]),\n\t\t\tstepNumber: history.length,\n\t\t\txIsNext: !this.state.xIsNext,\n\t\t})\n\t}\n\n\tjumpTo(step) {\n\t\tconst location = this.state.location[step];\n\n\t\tthis.setState({\n\t\t\tstepNumber: step,\n\t\t\txIsNext: (step % 2) === 0,\n\t\t\tclicked: location.col + (3 * location.row),\n\t\t});\n\t}\n\n\treverseOrder() {\n\t\tthis.setState({\n\t\t\treversed: !this.state.reversed,\n\t\t});\n\t}\n\n\tresetGame() {\n\t\tthis.setState({\n\t\t\thistory: [{\n\t\t\t\tsquares: Array(9).fill(null),\n\t\t\t}],\n\t\t\tlocation: [{\n\t\t\t\tcol: null,\n\t\t\t\trow: null,\n\t\t\t}],\n\t\t\tstepNumber: 0,\n\t\t\txIsNext: true,\n\t\t\tclicked: null,\n\t\t\treversed: false,\n\t\t});\n\t}\n\t\n\tchangeBoardSize(e) {\n\t\te.preventDefault();\n\t\tlet newBoardSize = this.state.newBoardSize;\n\n\t\tthis.resetGame();\n\n\t\tthis.setState({\n\t\t\tboardSize: newBoardSize,\n\t\t});\n\t}\n\n\tsetBoardSize(e) {\n\t\tlet value = e.target.value;\n\t\tlet validity = false;\n\t\tlet size = this.state.boardSize;\n\t\tconst regex = /^\\d+$/;\n\n\t\tif (value.match(regex)) {\n\t\t\tvalidity = true;\n\t\t\tsize = value;\n\t\t}\n\n\t\tthis.setState({\n\t\t\tboardSizeValid: validity,\n\t\t\tnewBoardSize: size,\n\t\t});\n\t}\n\n\trender() {\n\t\tconst history = this.state.history;\n\t\tconst location = this.state.location;\n\t\tconst reversed = this.state.reversed;\n\t\tconst clicked = this.state.clicked;\n\t\tconst current = history[this.state.stepNumber];\n\t\tconst boardSize = this.state.boardSize;\n\t\tconst winner = calculateWinner(current.squares, boardSize);\n\n\t\tconst moves = history.map((step, move) => {\n\t\t\tif (reversed) {\n\t\t\t\tmove = history.length - 1 - move;\n\t\t\t}\n\n\t\t\tconst coords = '(' + location[move].col + ',' + location[move].row + ')';\n\t\t\tconst desc = move ? 'Go to move #' + move + ' ' + coords : 'Go to game start';\n\n\t\t\treturn (\n\t\t\t\t<li key={move}>\n\t\t\t\t\t<button onClick={() => this.jumpTo(move)}>\n\t\t\t\t\t\t{desc}\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\n\t\tlet status;\n\n\t\tif (!winner && this.state.stepNumber >= (boardSize * boardSize)) {\n\t\t\tstatus = 'Draw'\n\t\t} else if (winner) {\n\t\t\tstatus = 'Winner: ' + winner.player;\n\t\t} else {\n\t\t\tstatus = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\t\t}\n\n\t\tlet order;\n\n\t\tif (reversed) {\n\t\t\torder = 'Sort ascending';\n\t\t} else {\n\t\t\torder = 'Sort descending';\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board \n\t\t\t\t\t\tsquares={current.squares}\n\t\t\t\t\t\tonClick={(i) => this.handleClick(i)}\n\t\t\t\t\t\twinner={winner}\n\t\t\t\t\t\tclicked={clicked}\n\t\t\t\t\t\tboardSize={boardSize}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t\t<div className=\"status\">\n\t\t\t\t\t\t{status}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"buttons\">\n\t\t\t\t\t\t<input type=\"tel\" placeholder={this.state.boardSize} onChange={(e) => this.setBoardSize(e)}/>\n\t\t\t\t\t\t<button onClick={(e) => this.changeBoardSize(e)} disabled={!this.state.boardSizeValid}>\n\t\t\t\t\t\t\tChange board size\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button onClick={() => this.reverseOrder()}>\n\t\t\t\t\t\t\t{order}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button onClick={() => this.resetGame()}>\n\t\t\t\t\t\t\tReset game\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t{moves}\n\t\t\t\t\t</ol>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nReactDOM.render(\n\t<Game />,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}